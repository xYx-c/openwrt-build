#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI

on:
  repository_dispatch:
  workflow_dispatch:

env:
  CONFIG_FILE: .config
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build_openwrt:
    name: Build OpenWrt firmware
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set +e
          docker rmi `docker images -q`
          echo "Deleting files, please wait ..."
          sudo rm -rf \
            /usr/share/dotnet \
            /etc/mysql \
            /etc/php
          sudo -E apt-get -y purge \
            azure-cli \
            ghc* \
            zulu* \
            hhvm \
            llvm* \
            firefox \
            google* \
            dotnet* \
            powershell \
            openjdk* \
            mysql* \
            php*
          sudo -E apt-get update
          sudo -E apt-get -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "$TZ"
          
      - name: Clone source code
        env: 
          REPO_URL: https://github.com/coolsnowwolf/lede
          REPO_BRANCH: master
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          git clone -b master  https://github.com/vernesong/OpenClash.git package/luci-app-openclash
          echo "src-git ssrp https://github.com/fw876/helloworld.git" >> ./feeds.conf.default
          # sed -i '$a src-git package https://github.com/armorgen/openwrt-luci.git' feeds.conf.default

          
      - name: Update feeds
        working-directory: ./openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          sed -i 's/192.168.1.1/10.5.2.1/g' package/base-files/files/bin/config_generate

      - name: Generate configuration file
        run: |
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          cd openwrt && make defconfig
          
      - name: Download package
        working-directory: ./openwrt
        run: |
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        working-directory: ./openwrt
        run: |
          make -j$(nproc) || make -j1 V=s
          make -j$(nproc) V=s

      - name : Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: OpenWrt
          path: openwrt/bin

      # - name: Organize files
      #   id: organize
      #   run: |
      #     cd openwrt/bin/targets/*/*
      #     rm -rf packages
      #     echo "FIRMWARE=$PWD" >> $GITHUB_ENV
      #     echo "status=success" >> $GITHUB_OUTPUT
      # - name: Upload firmware directory
      #   uses: actions/upload-artifact@main
      #   if: steps.organize.outputs.status == 'success'
      #   with:
      #     name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
      #     path: ${{ env.FIRMWARE }}
      #     
      # - name: Generate release tag
      #   id: tag
      #   if: env.UPLOAD_RELEASE == 'true'
      #   run: |
      #     echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
      #     echo "status=success" >> $GITHUB_OUTPUT
      #  #uses: softprops/action-gh-release@v1
      # - name: Upload firmware to release
      #   uses: softprops/action-gh-release@v0.1.15
      #   if: steps.tag.outputs.status == 'success'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ steps.tag.outputs.release_tag }}
      #     files: ${{ env.FIRMWARE }}/*
      #
      # - name: Remove old Releases
      #   uses: dev-drprasad/delete-older-releases@v0.2.1
      #   if: env.UPLOAD_RELEASE == 'true'
      #   with:
      #     keep_latest: 5
      #     delete_tags: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
